;;;;Utility


(defun longer (x y)
  (labels ((compare (x y)
	     (and (consp x);if t then x is smaller
		  (or (null y);if t then y is smaller
		      (compare (cdr x) (cdr y))))))
    (if (and (listp x) (listp y))
	(compare x y)
	(> (length x) (length y)))))

(defun filter (fn lst)
  (let ((acc nil))
    (dolist (x lst)
      (let ((val (funcall fn x)))
	(if val (cons val lst))))
    (nreverse acc)))

(defun group (source n)
  (if (zerop n) (error "zero length"))
  (labels ((rec (source acc)
	     (let ((rest (nthcdr n source)))
	       (if (consp rest)
		   (rec rest (cons (subseq source 0 n) acc));step and work - and add it to acc
		   (nreverse (cons source acc))))));base- add the remainder and return the acc
    (if source (rec source nil) nil)))

;;;;Figure 4.3
(defun flatten (x)
  (labels ((rec (x acc)
	     (cond ((null x) acc);;base case
		   ((atom x) (cons x acc));do something 
		   (t (rec (car x)
			   (rec (cdr x) acc))))));step and do something
    (rec x nil)))

